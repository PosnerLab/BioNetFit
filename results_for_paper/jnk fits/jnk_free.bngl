begin model
# This is the JNK model from Fey et al. Science Signal. Dec. 2015
#
# Remarks: 
# Rules  25 and 26 generate 72 reactions, wich is double the number from PotterWheel, because the reverse reactoins are counted seperately
# scale_t is a somehwat artificial time scaling parameter that facilitates the parameter optimisation, for example in sutuations where the dose response fits well, but the timing is wrong.

begin parameters
	# the estimated parameters are indicated by the lower and upper bounds used in the comments. These bounds were used as constraints for the parameter estimation. 
	scale_t			scale_t__FREE__		# 1		5
	ANI				300 			#not estimated
	k3_ZAKbyU1		0.005 			#not estimated
	K1_U1toZAK		10 				#not estimated
	d3_ZAK			0.5 			#not estimated
	D1_ZAK			10 				#not estimated
	k3_MKK4byZAK	k3_MKK4byZAK__FREE__		# 0.01	1
	K1_ZAKtoMKK4	0.1 			#not estimated
	d3_MKK4			0.25 			#not estimated
	D1_MKK4			1 				#not estimated
	k3_MKK7byZAK	k3_MKK7byZAK__FREE__		# 0.005	0.5
	K1_ZAKtoMKK7	0.1 			#not estimated
	f3_MKK7byZAK	f3_MKK7byZAK__FREE__		# 1		100
	d3_MKK7			0.5 			#not estimated
	D1_MKK7			1 				#not estimated
	k3_JNKbyMKK4	k3_JNKbyMKK4__FREE__		# 0.1	5
	K1_MKK4toJNK	1 				#not estimated
	k3_JNKbyMKK7	k3_JNKbyMKK7__FREE__		# 0.1	5
	K1_MKK7toJNK	0.1 			#not estimated
	f3_JNKbyMKK7	1 				#not estimated
	d3_JNK			0.5 			#not estimated
	D1_JNK			1 				#not estimated
	k3_MKK7byJNK	k3_MKK7byJNK__FREE__ 	# 0.1 	5
	K1_JNKtoMKK7	1 				#not estimated
	inh_JNK			1 				#dummy parameter describing the JNK inhibitor: 1 - control; 0 - JNK inhibitor
	d3_MKK7byJNKPT	0.5 			#not estimated
	D1_JNKPTtoMKK7	1 				#not estimated
	k1_ZAKtoMKK7	1000 			#not estimated
	f1_ZAKtoMKK7P	f1_ZAKtoMKK7P__FREE__ 	# 1		20
	k1_ZAKtoJNK		1000 			#not estimated
	K1_ZAKtoJNK		1 				#not estimated
	k3_MKK4byAKT	1 				#not estimated
	K1_AKTtoMKK4	1 				#not estimated
	k3_MKK7byAKT	5 				#not estimated
	K1_AKTtoMKK7	1 				#not estimated
	d3_MKK4byAKTPT	1 				#not estimated
	D1_AKTPTtoMKK4	1 				#not estimated
	d3_MKK7byAKTPT	1 				#not estimated
	D1_AKTPTtoMKK7	1 				#not estimated
	scale_ppMKK4	scale_ppMKK4__FREE__ 	# 0.5 	2
	scale_ppMKK7	scale_ppMKK7__FREE__		# 0.5 	2
	scale_ppJNK		scale_ppJNK__FREE__		# 0.5 	2
	pAKT 			0.01			#not estimated, this is only used for the patient specific simulations, the measured pAKT in SY5Y cells (the cells used for generating the calibration data) was negligible small    
	ZAK_conc		1.5605
end parameters 

begin molecule types
	ZAK(Y~0~P~PP,KK,K) 
	MKK4(Y~0~P~PP,KKK,AKT~0~P) 
	MKK7(Y~0~P~PP,KKK,AKT~0~P,FB~0~P)
	JNK(Y~0~P~PP,KKK)
end molecule types

begin seed species
	# the total protein concentration of ZAK was estimated, the comment indicated the upper and lower bounds for the parameter estimation 
	ZAK(Y~0,KK,K) ZAK_conc		# 1		20
	MKK4(Y~0,KKK,AKT~0) 0 		#not estimated, but set to 0.5 in the MKK4 knowdown condition. Remark: These are measured values from Fig. S2C 
	MKK7(Y~0,KKK,AKT~0,FB~0) 0 	#not estimated, but set to 0.0 in the MKK7 knowdown condition. Remark: These are measured values from Fig. S2C  
	JNK(Y~0,KKK) 1 				#not estimated
end seed species

begin observables
	Molecules    ppZAK		ZAK(Y~PP)
	#observables used for fitting
	#   Remark: To fit the observables to the Western Blot data, each observable should be multiplied by the corresponsing scaling parameter.
	#           e.g. y_ppMKK4 = scale_ppMKK4*ppMKK4
	Molecules    ppMKK4		MKK4(Y~PP)
	Molecules    ppMKK7		MKK7(Y~PP)
	Molecules    ppJNK		JNK(Y~PP)
	
	#observables used in the rate laws
	#Kinase activities
	Molecules	a_ZAK		ZAK(Y~PP)				#Concentration of active ZAK		
	Molecules	a_MKK4		MKK4(Y~PP,AKT~0)		#Concentration of active MKK4
	Molecules	a_MKK7		MKK7(Y~PP,KKK,AKT~0)	#Concentration of free active MKK7
	Molecules	a_JNK		JNK(Y~PP)				#Concentration of active JNK
	
	#Substrate sets
	Molecules	s_ZAKbyU1	ZAK(Y~0),ZAK(Y~P)
	Molecules	s_MKKbyZAK	MKK4(Y~0,AKT~0),MKK4(Y~P,AKT~0) #MKK4(Y~0),MKK4(Y~P),MKK7(Y~0,KKK),MKK7(Y~P,KKK)
	Molecules	s_JNKbyMKK4	JNK(Y~0),JNK(Y~P)				#Active MKK4 can phosphorylate both free and scaffolded JNK
	Molecules	s_JNKbyMKK7	JNK(Y~0,KKK),JNK(Y~P,KKK)		#Free MKK7 only act on free JNK
	Molecules	s_MKK7byJNK	MKK7(FB~0)						#total concentration of JNK substrates
	Molecules	s_MKKbyAKT	MKK4(AKT~0),MKK7(KKK,AKT~0)		#AKT acts on all free forms of MKK4 and MKK7
	Molecules	s_ZAKbyPT	ZAK(Y~P),ZAK(Y~PP)
	Molecules	s_MKK4byPT	MKK4(Y~P),MKK4(Y~PP)
	Molecules	s_MKK7byPT	MKK7(Y~P),MKK7(Y~PP)
	Molecules	s_JNKbyPT	JNK(Y~P),JNK(Y~PP)
	Molecules	s_MKK7byJNKPT	MKK7(FB~P)
	Molecules	s_MKKbyAKTPT	MKK4(AKT~P),MKK7(AKT~P)
end observables

begin reaction rules
	# Phosphorylation of ZAK by the input
	ZAK(Y~0) -> ZAK(Y~P)  k3_ZAKbyU1*ANI/(K1_U1toZAK+s_ZAKbyU1)*scale_t
	ZAK(Y~P) -> ZAK(Y~PP) k3_ZAKbyU1*ANI/(K1_U1toZAK+s_ZAKbyU1)*scale_t
	ZAK(Y~PP) -> ZAK(Y~P) d3_ZAK/(D1_ZAK+s_ZAKbyPT)*scale_t
	ZAK(Y~P) -> ZAK(Y~0)  d3_ZAK/(D1_ZAK+s_ZAKbyPT)*scale_t
	
	# 5 Phoshorylation of MKK4 by ZAK
	#    Remark: in the SciSig model, this only happens when MKK4 is not phosph. at the AKT site 
	MKK4(Y~0,AKT~0) -> MKK4(Y~P,AKT~0)  k3_MKK4byZAK*a_ZAK/(K1_ZAKtoMKK4+s_MKKbyZAK)*scale_t
	MKK4(Y~P,AKT~0) -> MKK4(Y~PP,AKT~0) k3_MKK4byZAK*a_ZAK/(K1_ZAKtoMKK4+s_MKKbyZAK)*scale_t
	MKK4(Y~PP,AKT~0) -> MKK4(Y~P,AKT~0) d3_MKK4*(D1_MKK4+s_MKK4byPT)*scale_t
	MKK4(Y~P,AKT~0) -> MKK4(Y~0,AKT~0)  d3_MKK4*(D1_MKK4+s_MKK4byPT)*scale_t
	
	# 9 Phosphorylation of free MKK7 by ZAK
	#    Remark: in the SciSig model, this only happens when MKK7 is not phosph. at the AKT site
	MKK7(Y~0,KKK,AKT~0) -> MKK7(Y~P,KKK,AKT~0)  k3_MKK7byZAK*a_ZAK/(K1_ZAKtoMKK7+s_MKKbyZAK)*scale_t
	MKK7(Y~P,KKK,AKT~0) -> MKK7(Y~PP,KKK,AKT~0) k3_MKK7byZAK*a_ZAK/(K1_ZAKtoMKK7+s_MKKbyZAK)*scale_t
	
	# 11 Phosphorylation of scaffolded MKK7 by scaffolded ppZAK
	MKK7(Y~0,KKK!1).ZAK(Y~PP,KK!1) -> MKK7(Y~P,KKK) + ZAK(Y~PP,KK)  k3_MKK7byZAK*f3_MKK7byZAK*scale_t
	MKK7(Y~P,KKK!1).ZAK(Y~PP,KK!1) -> MKK7(Y~PP,KKK) + ZAK(Y~PP,KK) k3_MKK7byZAK*f3_MKK7byZAK*scale_t
	
	# 13 Dephosphorylation of MKK7 (free and scaffolded forms)
	#MKK7(Y~PP) -> MKK7(Y~P) d3_MKK7/(D1_MKK7+s_MKK7byPT)
	#MKK7(Y~P) -> MKK7(Y~0)  d3_MKK7/(D1_MKK7+s_MKK7byPT)
	MKK7(Y~PP,KKK,AKT~0) -> MKK7(Y~P,KKK,AKT~0) d3_MKK7/(D1_MKK7+s_MKK7byPT)*scale_t
	MKK7(Y~P,KKK,AKT~0) -> MKK7(Y~0,KKK,AKT~0)  d3_MKK7/(D1_MKK7+s_MKK7byPT)*scale_t
	MKK7(Y~PP,KKK!+,FB~P) -> MKK7(Y~P,KKK!+,FB~P) d3_MKK7/(D1_MKK7+s_MKK7byPT)*scale_t
	MKK7(Y~P,KKK!+,FB~P) -> MKK7(Y~0,KKK!+,FB~P)  d3_MKK7/(D1_MKK7+s_MKK7byPT)*scale_t
	
	# 15 Phosphorylation of free and scaffolded JNK by MKK4
	JNK(Y~0) -> JNK(Y~P)  k3_JNKbyMKK4*a_MKK4/(K1_MKK4toJNK+s_JNKbyMKK4)*scale_t
	JNK(Y~P) -> JNK(Y~PP) k3_JNKbyMKK4*a_MKK4/(K1_MKK4toJNK+s_JNKbyMKK4)*scale_t
	
	# 17 Phosphorylation of free JNK by free MKK7 and scaffolded JNK by scaffolded MKK7
	JNK(Y~0,KKK) -> JNK(Y~P,KKK)  k3_JNKbyMKK7*a_MKK7/(K1_MKK7toJNK+s_JNKbyMKK7)*scale_t
	JNK(Y~P,KKK) -> JNK(Y~PP,KKK)  k3_JNKbyMKK7*a_MKK7/(K1_MKK7toJNK+s_JNKbyMKK7)*scale_t
	JNK(Y~0,KKK!1).ZAK(K!1,KK!2).MKK7(Y~PP,KKK!2) -> JNK(Y~P,KKK) + ZAK(K,KK!2).MKK7(Y~PP,KKK!2)  k3_JNKbyMKK7*f3_JNKbyMKK7*scale_t
	JNK(Y~P,KKK!1).ZAK(K!1,KK!2).MKK7(Y~PP,KKK!2) -> JNK(Y~PP,KKK) + ZAK(K,KK!2).MKK7(Y~PP,KKK!2)  k3_JNKbyMKK7*f3_JNKbyMKK7*scale_t
	
	# 21 Dephosphorylation of JNK (free and scaffolded forms)
	JNK(Y~PP) -> JNK(Y~P) d3_JNK/(D1_JNK+s_JNKbyPT)*scale_t
	JNK(Y~P) -> JNK(Y~0)  d3_JNK/(D1_JNK+s_JNKbyPT)*scale_t
	
	# 23 Feedback phosphorylation of MKK7 by JNK
	#    Remark: in the SciSignal model this only hapens for free MKK7, we could change that here...
	#    Remark: in the SciSignal model this only hapens for MKK7 that is not phos. at the AKT site, we could change that here... 
	MKK7(FB~0,KKK,AKT~0) -> MKK7(FB~P,KKK,AKT~0) inh_JNK*k3_MKK7byJNK*a_JNK/(K1_JNKtoMKK7+s_MKK7byJNK)*scale_t
	MKK7(FB~P,KKK,AKT~0) -> MKK7(FB~0,KKK,AKT~0) d3_MKK7byJNKPT/(D1_JNKPTtoMKK7+s_MKK7byJNKPT)*scale_t
	
	# 25 Scaffolding: ZAK associates with feedback-phosphorylated MKK7
	#    Remark: in the SciSignal model this only hapens when MKK7 is not phosphorylated by AKT
	ZAK(KK) + MKK7(FB~P,KKK,AKT~0) <-> ZAK(KK!1).MKK7(FB~P,KKK!1,AKT~0) k1_ZAKtoMKK7*f1_ZAKtoMKK7P*scale_t,k1_ZAKtoMKK7*K1_ZAKtoMKK7*scale_t
	
	# 26 Scaffolding: ZAK associates with JNK
	ZAK(K) + JNK(KKK) <-> ZAK(K!1).JNK(KKK!1) k1_ZAKtoJNK*scale_t,k1_ZAKtoJNK*K1_ZAKtoJNK*scale_t
	
	# 27 Negative crosstalk: inhibitory phosphorylation of MKK4 and MKK7 by AKT
	#    Remark: in the SciSignal model this only hapens for free MKK4 and free MKK7, we could change that here... 
	#    Remark: in the SciSignal model this only hapens for MKK7 that is not FB phosph., we could change that here... 
	MKK4(AKT~0,KKK) -> MKK4(AKT~P,KKK) k3_MKK4byAKT*pAKT/(K1_AKTtoMKK4+s_MKKbyAKT)*scale_t
	MKK7(AKT~0,KKK,FB~0) -> MKK7(AKT~P,KKK,FB~0) k3_MKK7byAKT*pAKT/(K1_AKTtoMKK7+s_MKKbyAKT)*scale_t
	MKK4(AKT~P,KKK) -> MKK4(AKT~0,KKK) d3_MKK4byAKTPT/(D1_AKTPTtoMKK4+s_MKKbyAKTPT)*scale_t
	MKK7(AKT~P,KKK,FB~0) -> MKK7(AKT~0,KKK,FB~0) d3_MKK7byAKTPT/(D1_AKTPTtoMKK7+s_MKKbyAKTPT)*scale_t
end reaction rules

begin functions
	#k_func(kcat,KM,E_tot,SubstrateFun)	kcat*E_tot/(KM + SubstrateFun)
	
	# Scaled outputs for fitting
	ppMKK4_scaled ppMKK4 * scale_ppMKK4
	ppMKK7_scaled ppMKK7 * scale_ppMKK7
	ppJNK_scaled ppJNK * scale_ppJNK
end functions

end model


begin actions

#generate_network({overwrite=>1})
#setParameter("ANI",0)
#simulate({method=>"ode",t_start=>0,t_end=>500,n_steps=>500})
#setParameter("ANI",300)
#simulate({method=>"ode",continue=>1,t_start=>500,t_end=>620,n_steps=>500})
#writeMfile()

	generate_network({overwrite=>1})
	
	saveConcentrations("init") # Save initial state
	
	# Equil for tc and contr
	setParameter("ANI",0) # ANI is at 0 for equilibration
	setParameter("inh_JNK",1) # No JNK inhibition
	setConcentration("MKK4(Y~0,KKK,AKT~0)",1) # Set MKK4 conc to 1
	setConcentration("MKK7(Y~0,KKK,AKT~0,FB~0)",1) # Set MKK7 conc to 1
	simulate({method=>"ode",t_start=>0,t_end=>500,n_steps=>1,print_functions=>1,suffix=>"equil"})
	saveConcentrations() # Save concentrations for use in TC and contr
	
	# Sim for tc
	resetConcentrations() # Start from concentrations at end of equilibration
	setParameter("ANI",300) # Introduce ANI
	simulate({method=>"ode",t_start=>0,t_end=>60,n_steps=>12,print_functions=>1,prefix=>"tc"})
	
	# Sim for contr
	resetConcentrations() # Start from concentrations at end of last equilibration
	parameter_scan({method=>"ode",parameter=>"ANI",t_start=>0,t_end=>30,n_steps=>1,print_functions=>1,par_scan_vals=>[3,10,30,100,300,1000],prefix=>"dr_contr"})

	# Equil for JNKinh
	resetConcentrations("init") # Reset to initial state
	setParameter("inh_JNK",1) # Turn on JNK inhibition
	setParameter("ANI",0) # No ANI for equilibration
	setConcentration("MKK4(Y~0,KKK,AKT~0)",1) # Set MKK4 conc to 1
	setConcentration("MKK7(Y~0,KKK,AKT~0,FB~0)",1) # Set MKK7 conc to 1
	simulate({method=>"ode",t_start=>0,t_end=>500,n_steps=>1, print_functions=>1, suffix=>"equil"})
	saveConcentrations() # Save concentrations for use in JNKinh
	
	# Sim for JNKinh
	resetConcentrations() # Start off from concentrations at end of last equilibration
	parameter_scan({method=>"ode", parameter=>"ANI", t_start=>0, t_end=>30, n_steps=>1, print_functions=>1, par_scan_vals=>[3,10,30,100,300,1000], prefix=>"dr_JNKinh"})
	
	# Equil for MKK4
	resetConcentrations("init")
	setParameter("inh_JNK",1)
	setParameter("ANI",0)
	setConcentration("MKK4(Y~0,KKK,AKT~0)",0.5)
	setConcentration("MKK7(Y~0,KKK,AKT~0,FB~0)",1)
	simulate({method=>"ode",t_start=>0,t_end=>500,n_steps=>1, print_functions=>1, suffix=>"equil"})
	saveConcentrations()
	
	# Sim for MKK4
	resetConcentrations()
	parameter_scan({method=>"ode", parameter=>"ANI", t_start=>0, t_end=>30, n_steps=>1, print_functions=>1, par_scan_vals=>[30,100,300,1000], prefix=>"dr_siMKK4"})
	
	# Equil for MKK7
	resetConcentrations("init")
	setParameter("ANI",0)
	setConcentration("MKK4(Y~0,KKK,AKT~0)",1)
	setConcentration("MKK7(Y~0,KKK,AKT~0,FB~0)",0)
	simulate({method=>"ode",t_start=>0,t_end=>500,n_steps=>1, print_functions=>1, suffix=>"equil"})
	saveConcentrations()
	
	# Sim for MKK7
	resetConcentrations()
	parameter_scan({method=>"ode", parameter=>"ANI", t_start=>0, t_end=>30, n_steps=>1, print_functions=>1, par_scan_vals=>[30,100,300,1000], prefix=>"dr_siMKK7"})

end actions
