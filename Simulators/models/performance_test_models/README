Performance measures of NFsim to Dynstoc and RuleMonkey and Kappa


This folder contains the models (both in the BioNetGen Langauge and the Kappa
Language) used in running the performance tests of NFsim.
Below are short descriptions of those models, together with the command line
arguments used to run the models.  Note that to run these models with NFsim using
the command line options below, you will have to use BNG to generate an xml file.
To run DYNSTOC or RuleMonkey, you will have to change the appropriate lines in
the BNGL file to execute the simulation.  These commands will work directly on
a Linux machine, where they were originally tested.  You may have to modify
these lines to run them on other platforms.

The versions of DYNSTOC, RuleMonkey, and kappa that were tested are:
dynstoc-1.0.1
rulemonkey-2.0.25
kappamodeler-kappa-10549-0-gb853244


pushpull system
"push_pull.bngl" & "push_pull.ka"

Simple enzymatic system consisting of a substrate protein that can be phosphorylated
and dephosphorylated by a kinase or phosphatase.

NFsim:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./NFsim -xml push_pull.xml -oSteps 100 -sim 100 -notf
DYNSTOC:    /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./ds_bngl push_pull_ds.bngl
RuleMonkey: /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./rm_bngl push_pull_rm.bngl
Kappa:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./simplx --sim models/push_pull.ka --time 100 --points 100  --no-maps




egfr system
"egfr_net.bngl" & "egfr_net.ka"

Simplified model of EGFR signaling reactions, taken from the set of example
models included with the DYNSTOC and RuleMonkey distributions.

NFsim:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./NFsim -xml egfr_net.xml -oSteps 120 -sim 120 -notf -utl 2
DYNSTOC:    /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./ds_bngl egfr_net_ds.bngl
RuleMonkey: /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./rm_bngl egfr_net_rm.bngl
Kappa:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./simplx --time 120 --points 120 --no-maps --sim egfr_net.ka



polymer system
"poly.bngl" & "poly.ka"

Toy polymerization model of a single molecule that can assemble into long 1D
polymers.  The system is seeded with 5 initial polymers that can extend on one
end and is dissassembled at the other.  In comparison to Dynstoc and RuleMonkey,
100 second simulations were run, whereas in comparison to kappa, 10000s simulations
were run.  This was done for practical reasons, because of the much slower runtime 
of Dynstoc and RuleMonkey

NFsim:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./NFsim -xml poly.xml -oSteps 100 -sim 100 -utl 2
DYNSTOC:    /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./ds_bngl poly.bngl
RuleMonkey: /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./rm_bngl poly.bngl

NFsim:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./NFsim -xml poly.xml -oSteps 100 -sim 10000 -utl 2 -notf
Kappa:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./simplx --sim poly.ka --time 10000 --points 100




tlbr system
"tlbr_performance.bngl" & "tlbr_performance.ka"

The standard Trivalent-ligand, bivalent-receptor model, enforcing the condition
that no rings can form, as in the original specification of this model.  Note that
kappa does not support multiple binding sites that have the same name, so many
extra rules have to be written that allow reactions between any of the identical
receptor or ligand binding sites.  Note also that due to kappa's support of observables,
the observables from the kappa model may not exactly match the NFsim/Dynstoc/RuleMonkey
results.  Note that the number of events generated by kappa and NFsim are the same,
however, so it is assumed the same simulations are executed.  Note also that for the
comparison to kappa, a 3000s simulation was run instead of a 300s.


NFsim:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./NFsim -xml tlbr/tlbr_performance.xml -oSteps 300 -sim 300 -bscb -cb -utl 3
RuleMonkey: /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./rm_bngl tlbr/tlbr_performance.bngl
DYNSTOC:    /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./ds_bngl tlbr/tlbr_performance.bngl

NFsim:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./NFsim -xml tlbr/tlbr_performance.xml -oSteps 3000 -sim 3000 -bscb -cb -utl 3
Kappa:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./simplx --sim tlbr_performance.ka --time 3000 --points 3000 --no-maps




chemotaxis receptor system system
"ANx_noActivity.bngl" & "ANx_noActivity.ka"

To create this model, we took the assistance neighborhood model of chemoreceptor
adaptation, and took out every single reaction except for CheR/CheB binding and
unbinding the tether site of chemoreceptors.  All other reactions depend on
the activity of the receptors, and so require NFsim's coarse-graining functions,
and therefore cannot be simulated with DYNSTOC, kappa, or RuleMonkey.  This test
was therefore designed just to measure performance when there is a large cluster
of molecules in the system (in this case, 18 receptor dimers, where a dimer is
the unit molecule, plus on average binding of 1 CheR / CheB per cluster).


fuller model
NFsim:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./NFsim -xml ANx_noActivity.xml -oSteps 100 -sim 100 -utl 2
RuleMonkey: /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./rm_bngl ANx_noActivity.bngl
DYNSTOC:    /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./ds_bngl ANx_noActivity.bngl
Kappa:      /usr/bin/time -f "Sys:%S User:%U Mem:%M" ./simplx --sim ANx_noActivity.ka --time 100 --points 100 --no-maps

